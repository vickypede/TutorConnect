-- USERS
CREATE TABLE IF NOT EXISTS users (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  email VARCHAR(255) NOT NULL UNIQUE,
  password_hash VARCHAR(255) NOT NULL,
  name VARCHAR(120) NOT NULL,
  phone VARCHAR(40),
  role ENUM('STUDENT','TUTOR','ADMIN') NOT NULL DEFAULT 'STUDENT',
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- PASSWORD RESET TOKENS
CREATE TABLE IF NOT EXISTS password_resets (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  user_id BIGINT NOT NULL,
  token_sha256 CHAR(64) NOT NULL,
  expires_at TIMESTAMP NOT NULL,
  used_at TIMESTAMP NULL,
  CONSTRAINT fk_pr_user FOREIGN KEY (user_id) REFERENCES users(id)
);

-- BOOKINGS
CREATE TABLE IF NOT EXISTS bookings (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  student_id BIGINT NOT NULL,
  tutor_id BIGINT NOT NULL,
  subject VARCHAR(120) NOT NULL,
  start_at TIMESTAMP NOT NULL,
  status ENUM('PENDING','APPROVED','REJECTED','CANCELLED') NOT NULL DEFAULT 'PENDING',
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_b_student FOREIGN KEY (student_id) REFERENCES users(id),
  CONSTRAINT fk_b_tutor   FOREIGN KEY (tutor_id)   REFERENCES users(id)
);

CREATE INDEX IF NOT EXISTS idx_users_email         ON users(email);
CREATE INDEX IF NOT EXISTS idx_resets_token_sha256 ON password_resets(token_sha256);
CREATE INDEX IF NOT EXISTS idx_bookings_tutor_time ON bookings(tutor_id, start_at);
CREATE INDEX IF NOT EXISTS idx_bookings_student    ON bookings(student_id);
